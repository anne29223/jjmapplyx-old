{
  "name": "Job Scraping Workflow",
  "nodes": [
    {
      "parameters": {},
      "id": "start-node",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "url": "https://www.indeed.com/jobs?q={{$node.Start.json.query}}&l={{$node.Start.json.location}}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "scrape-indeed",
      "name": "Scrape Indeed",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [450, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse job listings from Indeed HTML\nconst html = $input.first().json.body;\nconst jobs = [];\n\n// Simple regex to extract job data (in production, use proper HTML parser)\nconst titleRegex = /<h2[^>]*data-jk=\"([^\"]*)\">.*?<span title=\"([^\"]*)\"/g;\nconst companyRegex = /<span class=\"companyName\">.*?<a[^>]*>([^<]*)<\\/a>/g;\n\nlet match;\nwhile ((match = titleRegex.exec(html)) !== null) {\n  const jobId = match[1];\n  const title = match[2];\n  \n  // Extract company name\n  const companyMatch = companyRegex.exec(html);\n  const company = companyMatch ? companyMatch[1] : 'Unknown';\n  \n  jobs.push({\n    id: jobId,\n    title: title,\n    company: company,\n    url: `https://www.indeed.com/job/${jobId}`,\n    source: 'indeed',\n    dateFound: new Date().toISOString()\n  });\n}\n\nreturn jobs.map(job => ({ json: job }));"
      },
      "id": "parse-jobs",
      "name": "Parse Jobs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://tzvzranspvtifnlgrkwi.supabase.co/functions/v1/n8n-webhook",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "body": {
          "action": "job-found",
          "data": "={{$json}}"
        },
        "options": {
          "headers": {
            "Content-Type": "application/json"
          }
        }
      },
      "id": "send-to-jjmapplyx",
      "name": "Send to JJMapplyx",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [850, 300]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Scrape Indeed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Indeed": {
      "main": [
        [
          {
            "node": "Parse Jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Jobs": {
      "main": [
        [
          {
            "node": "Send to JJMapplyx",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {},
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}