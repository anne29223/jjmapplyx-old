{
  "name": "job-scraping-workflow",
  "nodes": [
    {
      "parameters": {},
      "id": "f439e115-0f0b-4821-b830-8edcc3606454",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "url": "https://remoteok.com/api",
        "options": {
          "timeout": 10000
        }
      },
      "id": "ed4d1891-9162-4975-8ec5-74562e11f491",
      "name": "Scrape Indeed",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        208,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse job listings from Indeed HTML\nconst html = $input.first().json.body;\nconst jobs = [];\n\n// Simple regex to extract job data (in production, use proper HTML parser)\nconst titleRegex = /<h2[^>]*data-jk=\"([^\"]*)\">.*?<span title=\"([^\"]*)\"/g;\nconst companyRegex = /<span class=\"companyName\">.*?<a[^>]*>([^<]*)<\\/a>/g;\n\nlet match;\nwhile ((match = titleRegex.exec(html)) !== null) {\n  const jobId = match[1];\n  const title = match[2];\n  \n  // Extract company name\n  const companyMatch = companyRegex.exec(html);\n  const company = companyMatch ? companyMatch[1] : 'Unknown';\n  \n  jobs.push({\n    id: jobId,\n    title: title,\n    company: company,\n    url: `https://www.indeed.com/job/${jobId}`,\n    source: 'indeed',\n    dateFound: new Date().toISOString()\n  });\n}\n\nreturn jobs.map(job => ({ json: job }));"
      },
      "id": "cb9f6432-8cee-41e3-a05c-488c52fb07f1",
      "name": "Parse Jobs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        0
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://tzvzranspvtifnlgrkwi.supabase.co/functions/v1/n8n-webhook",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "id": "3115d97c-227a-43a9-952f-f754e28e58cc",
      "name": "Send to JJMapplyx",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        608,
        0
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Scrape Indeed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Indeed": {
      "main": [
        [
          {
            "node": "Parse Jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Jobs": {
      "main": [
        [
          {
            "node": "Send to JJMapplyx",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8d36d6a7-2434-4e9f-a426-bd2d76dabb7e",
  "meta": {
    "instanceId": "34422b5d0739e80dd8c67e3b4b210d804ca4de352d0fdb0e552022accead2f3c"
  },
  "id": "tHGirLQEGqNsXWkk",
  "tags": []
}